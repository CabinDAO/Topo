import { styled } from "@stitches/react";
import React, { CSSProperties, useMemo } from "react";

type Sizes = "sm" | "md" | "lg" | "xl";
type Colors = "sand" | "sprout" | "wheat" | "forest";

const ColorSvg = styled("svg", {
  color: "currentColor",
  display: "inline-block",
  variants: {
    color: {
      sand: {
        color: "$sand",
      },
      sprout: {
        color: "$sprout",
      },
      wheat: {
        color: "$wheat",
      },
      forest: {
        color: "$forest",
      },
    },
  },
});

const iconSizes: Record<Sizes, { width?: number; height: number }> = {
  sm: {
    height: 17,
  },
  md: {
    height: 42,
  },
  lg: {
    height: 194,
  },
  xl: {
    height: 312,
  },
};

const BoxTreeIcon = ({ size, color }: { size: Sizes; color?: Colors }) => {
  const dimensions = iconSizes[size];
  return (
    <ColorSvg
      viewBox="0 0 194 194"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      color={color}
      {...dimensions}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M194 0H0V194H194V0ZM96.8232 35.1344L41.6592 75.1283V145.462L90.081 145.462V128.905H66.483L96.8233 59.9583L127.163 128.905H103.566V145.462L151.987 145.462V75.1283L96.8232 35.1344Z"
        fill="currentColor"
      />
    </ColorSvg>
  );
};

const TreeIcon = ({ size, color }: { size: Sizes; color?: Colors }) => {
  const dimensions = iconSizes[size];
  return (
    <ColorSvg
      viewBox="0 0 194 194"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      color={color}
      {...dimensions}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M0 70.341L97.022 0L194.044 70.341V194.044L108.88 194.044V164.923H150.384L97.0221 43.6599L43.6599 164.923H85.1638V194.044L0 194.044V70.341Z"
        fill="currentColor"
      />
    </ColorSvg>
  );
};

const wordmarkSizes: Record<Sizes, { width?: number; height: number }> = {
  sm: {
    height: 14,
  },
  md: {
    height: 42,
  },
  lg: {
    height: 88,
  },
  xl: {
    height: 120,
  },
};

const WordIcon = ({ size, color }: { size: Sizes; color?: Colors }) => {
  const dimensions = wordmarkSizes[size];
  return (
    <ColorSvg viewBox="0 0 327 88" color={color} {...dimensions}>
      <path
        d="M0.85 48.5C0.85 40.9467 2.53667 34.2 5.91 28.26C9.35667 22.2467 14.0133 17.59 19.88 14.29C25.82 10.9167 32.4567 9.23 39.79 9.23C48.37 9.23 55.8867 11.43 62.34 15.83C68.7933 20.23 73.3033 26.3167 75.87 34.09H58.16C56.4 30.4233 53.9067 27.6733 50.68 25.84C47.5267 24.0067 43.86 23.09 39.68 23.09C35.2067 23.09 31.21 24.1533 27.69 26.28C24.2433 28.3333 21.53 31.2667 19.55 35.08C17.6433 38.8933 16.69 43.3667 16.69 48.5C16.69 53.56 17.6433 58.0333 19.55 61.92C21.53 65.7333 24.2433 68.7033 27.69 70.83C31.21 72.8833 35.2067 73.91 39.68 73.91C43.86 73.91 47.5267 72.9933 50.68 71.16C53.9067 69.2533 56.4 66.4667 58.16 62.8H75.87C73.3033 70.6467 68.7933 76.77 62.34 81.17C55.96 85.4967 48.4433 87.66 39.79 87.66C32.4567 87.66 25.82 86.01 19.88 82.71C14.0133 79.3367 9.35667 74.68 5.91 68.74C2.53667 62.8 0.85 56.0533 0.85 48.5ZM85.0636 56.31C85.0636 50.15 86.2736 44.6867 88.6936 39.92C91.1869 35.1533 94.5236 31.4867 98.7036 28.92C102.957 26.3533 107.687 25.07 112.894 25.07C117.44 25.07 121.4 25.9867 124.774 27.82C128.22 29.6533 130.97 31.9633 133.024 34.75V26.06H148.534V87H133.024V78.09C131.044 80.95 128.294 83.3333 124.774 85.24C121.327 87.0733 117.33 87.99 112.784 87.99C107.65 87.99 102.957 86.67 98.7036 84.03C94.5236 81.39 91.1869 77.6867 88.6936 72.92C86.2736 68.08 85.0636 62.5433 85.0636 56.31ZM133.024 56.53C133.024 52.79 132.29 49.6 130.824 46.96C129.357 44.2467 127.377 42.1933 124.884 40.8C122.39 39.3333 119.714 38.6 116.854 38.6C113.994 38.6 111.354 39.2967 108.934 40.69C106.514 42.0833 104.534 44.1367 102.994 46.85C101.527 49.49 100.794 52.6433 100.794 56.31C100.794 59.9767 101.527 63.2033 102.994 65.99C104.534 68.7033 106.514 70.7933 108.934 72.26C111.427 73.7267 114.067 74.46 116.854 74.46C119.714 74.46 122.39 73.7633 124.884 72.37C127.377 70.9033 129.357 68.85 130.824 66.21C132.29 63.4967 133.024 60.27 133.024 56.53ZM178.974 34.97C180.954 32.0367 183.668 29.6533 187.114 27.82C190.634 25.9867 194.631 25.07 199.104 25.07C204.311 25.07 209.004 26.3533 213.184 28.92C217.438 31.4867 220.774 35.1533 223.194 39.92C225.688 44.6133 226.934 50.0767 226.934 56.31C226.934 62.5433 225.688 68.08 223.194 72.92C220.774 77.6867 217.438 81.39 213.184 84.03C209.004 86.67 204.311 87.99 199.104 87.99C194.558 87.99 190.561 87.11 187.114 85.35C183.741 83.5167 181.028 81.17 178.974 78.31V87H163.574V5.6H178.974V34.97ZM211.204 56.31C211.204 52.6433 210.434 49.49 208.894 46.85C207.428 44.1367 205.448 42.0833 202.954 40.69C200.534 39.2967 197.894 38.6 195.034 38.6C192.248 38.6 189.608 39.3333 187.114 40.8C184.694 42.1933 182.714 44.2467 181.174 46.96C179.708 49.6733 178.974 52.8633 178.974 56.53C178.974 60.1967 179.708 63.3867 181.174 66.1C182.714 68.8133 184.694 70.9033 187.114 72.37C189.608 73.7633 192.248 74.46 195.034 74.46C197.894 74.46 200.534 73.7267 202.954 72.26C205.448 70.7933 207.428 68.7033 208.894 65.99C210.434 63.2767 211.204 60.05 211.204 56.31ZM245.935 18.8C243.222 18.8 240.948 17.9567 239.115 16.27C237.355 14.51 236.475 12.3467 236.475 9.78C236.475 7.21333 237.355 5.08666 239.115 3.39999C240.948 1.64 243.222 0.759996 245.935 0.759996C248.648 0.759996 250.885 1.64 252.645 3.39999C254.478 5.08666 255.395 7.21333 255.395 9.78C255.395 12.3467 254.478 14.51 252.645 16.27C250.885 17.9567 248.648 18.8 245.935 18.8ZM253.525 26.06V87H238.125V26.06H253.525ZM302.51 25.18C309.77 25.18 315.637 27.49 320.11 32.11C324.584 36.6567 326.82 43.0367 326.82 51.25V87H311.42V53.34C311.42 48.5 310.21 44.7967 307.79 42.23C305.37 39.59 302.07 38.27 297.89 38.27C293.637 38.27 290.264 39.59 287.77 42.23C285.35 44.7967 284.14 48.5 284.14 53.34V87H268.74V26.06H284.14V33.65C286.194 31.01 288.797 28.9567 291.95 27.49C295.177 25.95 298.697 25.18 302.51 25.18Z"
        fill="currentColor"
      />
    </ColorSvg>
  );
};

const TokenIcon = ({ size, color }: { size: Sizes; color?: Colors }) => {
  const dimensions = wordmarkSizes[size];
  return (
    <ColorSvg viewBox="0 0 317 91" color={color} {...dimensions}>
      <path
        d="M32.75 81.69C30.0367 81.6167 27.47 81.2133 25.05 80.48L23.07 90.38H15.04L17.57 77.84C11.9233 74.9067 7.74333 70.6167 5.03 64.97C2.31667 59.3233 0.96 52.6133 0.96 44.84C0.96 38.3867 2.13333 32.63 4.48 27.57C6.82667 22.4367 10.2733 18.2567 14.82 15.03C19.44 11.73 25.0133 9.67666 31.54 8.87L33.3 0.509993H41.33L39.68 8.43C42.3933 8.57666 44.9967 8.90666 47.49 9.42L49.25 0.509993H57.28L55.08 11.4C56.1067 11.7667 57.0967 12.17 58.05 12.61C59.0767 12.9767 60.0667 13.38 61.02 13.82L55.74 27.02C55.1533 26.6533 54.5667 26.36 53.98 26.14C53.3933 25.92 52.8067 25.6633 52.22 25.37L43.53 68.05C45.8767 67.7567 48.2233 67.28 50.57 66.62C52.99 65.96 55.52 65.1533 58.16 64.2V77.73C52.66 80.0767 46.8667 81.3967 40.78 81.69L39.02 90.38H30.99L32.75 81.69ZM44.74 22.73C43.64 22.3633 42.54 22.1433 41.44 22.07C40.34 21.9233 39.3867 21.85 38.58 21.85H36.93L27.91 66.4C29.01 66.9133 30.1833 67.3167 31.43 67.61C32.75 67.9033 34.1067 68.1233 35.5 68.27L44.74 22.73ZM28.57 23.72C24.9767 25.4067 22.2267 28.0833 20.32 31.75C18.4133 35.3433 17.46 39.7433 17.46 44.95C17.46 48.25 17.7533 51.22 18.34 53.86C18.9267 56.4267 19.8433 58.6633 21.09 60.57L28.57 23.72ZM117.842 69.37H87.2619L82.2019 84H66.0319L93.6419 7.10999H111.572L139.182 84H122.902L117.842 69.37ZM113.662 57.05L102.552 24.93L91.4419 57.05H113.662ZM193.062 44.62C197.389 45.4267 200.945 47.59 203.732 51.11C206.519 54.63 207.912 58.6633 207.912 63.21C207.912 67.3167 206.885 70.9467 204.832 74.1C202.852 77.18 199.955 79.6 196.142 81.36C192.329 83.12 187.819 84 182.612 84H149.502V7.22H181.182C186.389 7.22 190.862 8.06333 194.602 9.75C198.415 11.4367 201.275 13.7833 203.182 16.79C205.162 19.7967 206.152 23.2067 206.152 27.02C206.152 31.4933 204.942 35.2333 202.522 38.24C200.175 41.2467 197.022 43.3733 193.062 44.62ZM164.902 38.9H178.982C182.649 38.9 185.472 38.0933 187.452 36.48C189.432 34.7933 190.422 32.41 190.422 29.33C190.422 26.25 189.432 23.8667 187.452 22.18C185.472 20.4933 182.649 19.65 178.982 19.65H164.902V38.9ZM180.412 71.46C184.152 71.46 187.049 70.58 189.102 68.82C191.229 67.06 192.292 64.5667 192.292 61.34C192.292 58.04 191.192 55.4733 188.992 53.64C186.792 51.7333 183.822 50.78 180.082 50.78H164.902V71.46H180.412ZM235.586 7.22V84H220.186V7.22H235.586ZM316.471 84H301.071L266.201 31.31V84H250.801V7.10999H266.201L301.071 59.91V7.10999H316.471V84Z"
        fill="currentColor"
      />
    </ColorSvg>
  );
};

interface LogoProps {
  box?: boolean;
  className?: string;
  color?: Colors;
  css?: any;
  height?: number;
  size?: Sizes;
  style?: CSSProperties;
  variant?: "wordmark" | "logomark" | "token";
  width?: number;
}
const Logo = ({
  box,
  className,
  color,
  css,
  size = "lg",
  style,
  variant = "logomark",
  ...props
}: LogoProps) => {
  if (variant === "token") {
    return <TokenIcon size={size} color={color} {...props} />;
  }

  if (variant === "wordmark") {
    return <WordIcon size={size} color={color} {...props} />;
  }

  if (box) {
    return <BoxTreeIcon size={size} color={color} {...props} />;
  }

  return <TreeIcon size={size} color={color} {...props} />;
};

const BrandWrapper = styled("div", {
  display: "inline-flex",
  alignItems: "center",
  variants: {
    size: {
      sm: {
        fontSize: "$sm",
        gap: 12,
      },
      md: {
        fontSize: "$md",
        gap: 24,
      },
      lg: {
        fontSize: "$lg",
        gap: 32,
      },
      xl: {
        fontSize: "$xl",
        gap: 40,
      },
    },
    direction: {
      horizontal: {
        flexDirection: "row",
      },
      vertical: {
        flexDirection: "column",
      },
    },
  },
});

type BrandLogoProps = { direction?: "vertical" | "horizontal" } & LogoProps;
export const BrandLogo = ({
  direction = "horizontal",
  size = "lg",
  ...props
}: BrandLogoProps) => {
  return (
    <BrandWrapper direction={direction} size={size}>
      <Logo {...props} variant="logomark" size={size} />
      <Logo {...props} variant="wordmark" size={size} />
    </BrandWrapper>
  );
};

export default Logo;
